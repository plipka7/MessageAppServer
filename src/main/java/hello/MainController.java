package hello;

import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.net.Socket;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Optional;

import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.method.annotation.StreamingResponseBody;

import hello.User;
import hello.UserRepository;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/messenger") // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;

	@Autowired
	private MessageRepository messageRepository;

	@GetMapping(path="/user/add") // Map ONLY GET Requests
	public @ResponseBody String addNewUser (@RequestParam String username, 
											@RequestParam String password) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		User newUser = new User();
		newUser.setUsername(username);
		newUser.setPassword(password);
		newUser.setUrl(null);
		userRepository.save(newUser);
		return "Saved";
	}
	
	@GetMapping(path="/user/login")
	public String loginUser(@RequestParam String url, @RequestParam String username) {
		System.out.println("Inside the login method");
		Optional<User> oUser = userRepository.findById(username);
		if(!oUser.isPresent()) return "User does not exist!";
		User user = oUser.get();
		user.setUrl(url);
		userRepository.save(user);
		return "Success";
	}

	@GetMapping(path="/user/logout")
	public String logoutUser(@RequestParam String username) {
		Optional<User> oUser = userRepository.findById(username);
		if(!oUser.isPresent()) return "User not found.";
		User user = oUser.get();
		user.setUrl(null);
		userRepository.save(user);
		return "Success";
	}
	
	@GetMapping(path="/messages/add")
	public String postMessage(@RequestParam String message,
			                  @RequestParam String sender,
			                  @RequestParam String receiver,
			                  @RequestParam Long date) {
		Message newMessage = new Message();
		newMessage.setSenderUsername(sender);
		newMessage.setReceiverUsername(receiver);
		newMessage.setMessage(message);
		newMessage.setTimeStamp(date);
		
		Socket s;
		System.out.println("Message Recipient: " + receiver);
		messageRepository.save(newMessage);
		try {
			User user = userRepository.findById(receiver).get();
			String[] url = user.getUrl().split(":");
			String ip = url[0];
			int port = Integer.parseInt(url[1]);
			System.out.println("ip: " + ip);
			System.out.println("port " + port);
			s = new Socket(ip, port);
			ObjectOutputStream oos = new ObjectOutputStream(s.getOutputStream());
			oos.writeObject(messageToJson(newMessage).toString());
			s.close();
		} catch(NoSuchElementException e) {
			e.printStackTrace();
			return "User not found";
		} catch(IOException e) {
			e.printStackTrace();
			return "IO Problem";
		} catch(NullPointerException e) {
			e.printStackTrace();
			return "User not found";
		}
		
		return "Success";
	}
	
	@GetMapping(path="/messages/get")
	public StreamingResponseBody getConversation(@RequestParam String username, @RequestParam String friendName) {
		return new StreamingResponseBody() {
			@Override
			public void writeTo(OutputStream out) throws IOException {
				System.out.println("Inside the get message body!!");
				System.out.printf("USER: %s\nFRIEND: %s\n", username, friendName);
				ObjectOutputStream oos = new ObjectOutputStream(out);
				List<Message> messages = messageRepository.findMessagesForConversation(username, friendName);
				for(Message m : messages) {
					System.out.println("MESSAGE: " + m.getMessage());
					oos.writeObject(messageToJson(m).toString());
				}
				oos.close();
			}
		};
	}

	@GetMapping(path="/user/others")
	public StreamingResponseBody getOtherUsers(@RequestParam String username) {
		return new StreamingResponseBody() {
			@Override
			public void writeTo(OutputStream outputStream) throws IOException {
				ObjectOutputStream oos = new ObjectOutputStream(outputStream);
				List<String> userNames = userRepository.getOtherUsers(username);
				oos.writeObject(userNames);
			}
		};
	}
	
	private static JSONObject messageToJson(Message m) {
		JSONObject result = new JSONObject();
		result.put("message", m.getMessage());
		result.put("sender", m.getSenderUsername());
		result.put("receiver", m.getReceiverUsername());
		result.put("timeStamp", m.getTimeStamp());
		return result;
	}
}